apply plugin: 'jacoco'

ext {
    coverageSourceDirs = 'src/test/java'
}

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("../app/build//reports/rep") // file for reports (xml, html)
}

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = ['**/R.class',
                    '**/R$*.class',
                    '**/*$ViewBinder*.*',
                    '**/*$InjectAdapter*.*',
                    '**/*Injector*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
//                    '**/*Activity*.*',
                    '**/CiMattersApplication*.*',
                    'android/**/*.*']

    def debugTree = fileTree(
            dir: "build/intermediates/javac/debug/classes/com/sd/a3kleingroup",
            excludes: excludes)
    def kotlinDebugTree = fileTree(
            dir: "build/tmp/kotlin-classes/debug/com/sd/a3kleingroup",
            excludes: excludes)
    def mainSrc = "../app/src/main/java"

    def debugTreeMyLib = fileTree(
            dir: "../app/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes" +
                    "/de/logerbyte/app/javaClasses",
            excludes: excludes)
    def kotlinDebugTreeMyLib = fileTree(
            dir: "../app/build/tmp/kotlin-classes/debug/de/logerbyte/app",
            excludes: excludes)
    def mainSrcMyLib = "../app/src/main/java"

    classDirectories = files(
            [debugTree], [kotlinDebugTree],
            [debugTreeMyLib], [kotlinDebugTreeMyLib]
    )
    executionData = files(
            "../app/build/jacoco/testDebugUnitTest.exec","../app/build/jacoco/testDebugUnitTest.exec")
    sourceDirectories = files(
            [mainSrc],
            [mainSrcMyLib]
    )
}
